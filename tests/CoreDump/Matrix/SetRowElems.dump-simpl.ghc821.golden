
==================== Tidy Core ====================
2017-09-08 01:36:41.5488765 UTC

Result size of Tidy Core
  = {terms: 70, types: 123, coercions: 3, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
CoreDump.Matrix.SetRowElems.$trModule2 :: GHC.Prim.Addr#
CoreDump.Matrix.SetRowElems.$trModule2
  = "CoreDump.Matrix.SetRowElems"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
CoreDump.Matrix.SetRowElems.$trModule1 :: GHC.Types.TrName
CoreDump.Matrix.SetRowElems.$trModule1
  = GHC.Types.TrNameS CoreDump.Matrix.SetRowElems.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
CoreDump.Matrix.SetRowElems.$trModule4 :: GHC.Prim.Addr#
CoreDump.Matrix.SetRowElems.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
CoreDump.Matrix.SetRowElems.$trModule3 :: GHC.Types.TrName
CoreDump.Matrix.SetRowElems.$trModule3
  = GHC.Types.TrNameS CoreDump.Matrix.SetRowElems.$trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
CoreDump.Matrix.SetRowElems.$trModule :: GHC.Types.Module
CoreDump.Matrix.SetRowElems.$trModule
  = GHC.Types.Module
      CoreDump.Matrix.SetRowElems.$trModule3
      CoreDump.Matrix.SetRowElems.$trModule1

-- RHS size: {terms: 55, types: 107, coercions: 3, joins: 0/0}
setRowElems_
  :: Matrix 4 4 Float -> [Float] -> Maybe (Matrix 4 4 Float)
setRowElems_
  = \ (t :: Data.Tensor.Static.Tensor '[4, 4] Float)
      (xs :: [Float]) ->
      case t `cast` <Co:1> of
      { TensorInstances.Tensor'4'4'Float dt dt1 dt2 dt3 dt4 dt5 dt6 dt7
                                         dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 ->
      case xs of {
        [] -> GHC.Base.Nothing @ (Data.Tensor.Static.Tensor '[4, 4] Float);
        : ipv2 ipv3 ->
          case ipv3 of {
            [] -> GHC.Base.Nothing @ (Data.Tensor.Static.Tensor '[4, 4] Float);
            : ipv1 ipv5 ->
              case ipv5 of {
                [] -> GHC.Base.Nothing @ (Data.Tensor.Static.Tensor '[4, 4] Float);
                : ipv6 ipv7 ->
                  case ipv7 of {
                    [] -> GHC.Base.Nothing @ (Data.Tensor.Static.Tensor '[4, 4] Float);
                    : ipv8 ipv9 ->
                      GHC.Base.Just
                        @ (Data.Tensor.Static.Tensor '[4, 4] Float)
                        (case ipv2 of { GHC.Types.F# dt17 ->
                         case ipv1 of { GHC.Types.F# dt19 ->
                         case ipv6 of { GHC.Types.F# dt21 ->
                         case ipv8 of { GHC.Types.F# dt23 ->
                         (TensorInstances.Tensor'4'4'Float
                            dt
                            dt1
                            dt2
                            dt3
                            dt17
                            dt19
                            dt21
                            dt23
                            dt8
                            dt9
                            dt10
                            dt11
                            dt12
                            dt13
                            dt14
                            dt15)
                         `cast` <Co:2>
                         }
                         }
                         }
                         })
                  }
              }
          }
      }
      }


